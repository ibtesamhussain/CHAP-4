MADE BY:
NAME  : IBTESAM HUSSAIN 


4.1 Strings, Revisited

In [1]:
excuse = 'I\'m "sick"'
print(excuse)
I'm "sick"
In [2]:
poem = '\nTo make a prairie it takes a clover and one bee, -\nOne clover, and a bee,\nAnd revery.\nThe revery alone will do\nIf bees are few.\n'
print(poem)
To make a prairie it takes a clover and one bee, -
One clover, and a bee,
And revery.
The revery alone will do
If bees are few.

In [4]:
s = 'hello'
print(s[0])
print(s[0:2])
print(s[3:4])
print(s[-3:-1])
print(s[:2])
print(s[-3:])
h
he
l
ll
he
llo
In [5]:
s = '0123456789' #Practice Problem 4.1
In [7]:
print(s[2:5])
234
In [8]:
print(s[7:9])
78
In [9]:
print(s[1:8])
1234567
In [10]:
print(s[:4])
0123
In [11]:
print(s[7:])
789
In [13]:
message = '''This message is top secret and should not
be divulged to anyone without top secret clearance'''
message.find('top secret')
Out[13]:
16
In [14]:
message.count('top secret')
Out[14]:
2
In [15]:
message.replace('top', 'no')
Out[15]:
'This message is no secret and should not\nbe divulged to anyone without no secret clearance'
In [17]:
print(message)
This message is top secret and should not
be divulged to anyone without top secret clearance
In [18]:
public = message.replace('top', 'no')
print(public)
This message is no secret and should not
be divulged to anyone without no secret clearance
In [19]:
message = 'top secret'
message.capitalize()
Out[19]:
'Top secret'
In [20]:
message.upper()
Out[20]:
'TOP SECRET'
In [21]:
'this is the text'.split()
Out[21]:
['this', 'is', 'the', 'text']
In [22]:
x = '2;3;5;7;11;13'
x.split(';')
Out[22]:
['2', '3', '5', '7', '11', '13']
In [23]:
table = str.maketrans('abcdef', 'uvwxyz')
'fad'.translate(table)
Out[23]:
'zux'
In [24]:
'desktop'.translate(table)
Out[24]:
'xysktop'
In [25]:
help(str)
Help on class str in module builtins:

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(self, format_spec, /)
 |      Return a formatted version of the string as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the string in memory, in bytes.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(self, /)
 |      Return a capitalized version of the string.
 |      
 |      More specifically, make the first character have upper case and the rest lower
 |      case.
 |  
 |  casefold(self, /)
 |      Return a version of the string suitable for caseless comparisons.
 |  
 |  center(self, width, fillchar=' ', /)
 |      Return a centered string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(self, /, encoding='utf-8', errors='strict')
 |      Encode the string using the codec registered for encoding.
 |      
 |      encoding
 |        The encoding in which to encode the string.
 |      errors
 |        The error handling scheme to use for encoding errors.
 |        The default is 'strict' meaning that encoding errors raise a
 |        UnicodeEncodeError.  Other possible values are 'ignore', 'replace' and
 |        'xmlcharrefreplace' as well as any other name registered with
 |        codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(self, /, tabsize=8)
 |      Return a copy where all tab characters are expanded using spaces.
 |      
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(self, /)
 |      Return True if the string is an alpha-numeric string, False otherwise.
 |      
 |      A string is alpha-numeric if all characters in the string are alpha-numeric and
 |      there is at least one character in the string.
 |  
 |  isalpha(self, /)
 |      Return True if the string is an alphabetic string, False otherwise.
 |      
 |      A string is alphabetic if all characters in the string are alphabetic and there
 |      is at least one character in the string.
 |  
 |  isascii(self, /)
 |      Return True if all characters in the string are ASCII, False otherwise.
 |      
 |      ASCII characters have code points in the range U+0000-U+007F.
 |      Empty string is ASCII too.
 |  
 |  isdecimal(self, /)
 |      Return True if the string is a decimal string, False otherwise.
 |      
 |      A string is a decimal string if all characters in the string are decimal and
 |      there is at least one character in the string.
 |  
 |  isdigit(self, /)
 |      Return True if the string is a digit string, False otherwise.
 |      
 |      A string is a digit string if all characters in the string are digits and there
 |      is at least one character in the string.
 |  
 |  isidentifier(self, /)
 |      Return True if the string is a valid Python identifier, False otherwise.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers such as "def" and
 |      "class".
 |  
 |  islower(self, /)
 |      Return True if the string is a lowercase string, False otherwise.
 |      
 |      A string is lowercase if all cased characters in the string are lowercase and
 |      there is at least one cased character in the string.
 |  
 |  isnumeric(self, /)
 |      Return True if the string is a numeric string, False otherwise.
 |      
 |      A string is numeric if all characters in the string are numeric and there is at
 |      least one character in the string.
 |  
 |  isprintable(self, /)
 |      Return True if the string is printable, False otherwise.
 |      
 |      A string is printable if all of its characters are considered printable in
 |      repr() or if it is empty.
 |  
 |  isspace(self, /)
 |      Return True if the string is a whitespace string, False otherwise.
 |      
 |      A string is whitespace if all characters in the string are whitespace and there
 |      is at least one character in the string.
 |  
 |  istitle(self, /)
 |      Return True if the string is a title-cased string, False otherwise.
 |      
 |      In a title-cased string, upper- and title-case characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |  
 |  isupper(self, /)
 |      Return True if the string is an uppercase string, False otherwise.
 |      
 |      A string is uppercase if all cased characters in the string are uppercase and
 |      there is at least one cased character in the string.
 |  
 |  join(self, iterable, /)
 |      Concatenate any number of strings.
 |      
 |      The string whose method is called is inserted in between each given string.
 |      The result is returned as a new string.
 |      
 |      Example: '.'.join(['ab', 'pq', 'rs']) -> 'ab.pq.rs'
 |  
 |  ljust(self, width, fillchar=' ', /)
 |      Return a left-justified string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  lower(self, /)
 |      Return a copy of the string converted to lowercase.
 |  
 |  lstrip(self, chars=None, /)
 |      Return a copy of the string with leading whitespace removed.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(self, sep, /)
 |      Partition the string into three parts using the given separator.
 |      
 |      This will search for the separator in the string.  If the separator is found,
 |      returns a 3-tuple containing the part before the separator, the separator
 |      itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing the original string
 |      and two empty strings.
 |  
 |  replace(self, old, new, count=-1, /)
 |      Return a copy with all occurrences of substring old replaced by new.
 |      
 |        count
 |          Maximum number of occurrences to replace.
 |          -1 (the default value) means replace all occurrences.
 |      
 |      If the optional argument count is given, only the first count occurrences are
 |      replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(self, width, fillchar=' ', /)
 |      Return a right-justified string of length width.
 |      
 |      Padding is done using the specified fill character (default is a space).
 |  
 |  rpartition(self, sep, /)
 |      Partition the string into three parts using the given separator.
 |      
 |      This will search for the separator in the string, starting at the end. If
 |      the separator is found, returns a 3-tuple containing the part before the
 |      separator, the separator itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing two empty strings
 |      and the original string.
 |  
 |  rsplit(self, /, sep=None, maxsplit=-1)
 |      Return a list of the words in the string, using sep as the delimiter string.
 |      
 |        sep
 |          The delimiter according which to split the string.
 |          None (the default value) means split according to any whitespace,
 |          and discard empty strings from the result.
 |        maxsplit
 |          Maximum number of splits to do.
 |          -1 (the default value) means no limit.
 |      
 |      Splits are done starting at the end of the string and working to the front.
 |  
 |  rstrip(self, chars=None, /)
 |      Return a copy of the string with trailing whitespace removed.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(self, /, sep=None, maxsplit=-1)
 |      Return a list of the words in the string, using sep as the delimiter string.
 |      
 |      sep
 |        The delimiter according which to split the string.
 |        None (the default value) means split according to any whitespace,
 |        and discard empty strings from the result.
 |      maxsplit
 |        Maximum number of splits to do.
 |        -1 (the default value) means no limit.
 |  
 |  splitlines(self, /, keepends=False)
 |      Return a list of the lines in the string, breaking at line boundaries.
 |      
 |      Line breaks are not included in the resulting list unless keepends is given and
 |      true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(self, chars=None, /)
 |      Return a copy of the string with leading and trailing whitespace remove.
 |      
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(self, /)
 |      Convert uppercase characters to lowercase and lowercase characters to uppercase.
 |  
 |  title(self, /)
 |      Return a version of the string where each word is titlecased.
 |      
 |      More specifically, words start with uppercased characters and all remaining
 |      cased characters have lower case.
 |  
 |  translate(self, table, /)
 |      Replace each character in the string using the given translation table.
 |      
 |        table
 |          Translation table, which must be a mapping of Unicode ordinals to
 |          Unicode ordinals, strings, or None.
 |      
 |      The table must implement lookup/indexing via __getitem__, for instance a
 |      dictionary or list.  If this operation raises LookupError, the character is
 |      left untouched.  Characters mapped to None are deleted.
 |  
 |  upper(self, /)
 |      Return a copy of the string converted to uppercase.
 |  
 |  zfill(self, width, /)
 |      Pad a numeric string with zeros on the left, to fill a field of the given width.
 |      
 |      The string is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.

In [26]:
forecast = 'It will be a sunny day today' #Practice Problem 4.2
In [34]:
count = forecast.count('day')
weather = forecast.find('sunny')
change = forecast.replace('sunny', 'cloudy')
print(count, weather, change, sep='\n')
2
13
It will be a cloudy day today
4.2 Formatted Output

In [28]:
n = 5
print(n)
5
In [29]:
r = 5/3
print(n, r)
5 1.6666666666666667
In [30]:
name = 'Ida'
print(n, r, name)
5 1.6666666666666667 Ida
In [31]:
print(n, r, name, sep=';')
5;1.6666666666666667;Ida
In [32]:
print(n, r, name, sep=', ')
5, 1.6666666666666667, Ida
In [33]:
print(n, r, name, sep='\n')
5
1.6666666666666667
Ida
In [35]:
last = 'Smith' #Practice Problem 4.3
first = 'John'
middle = 'Paul'
print(last, first, middle, sep='\t')
Smith	John	Paul
In [36]:
for name in ['Joe', 'Sam', 'Tim', 'Ann']:
    print(name, end='! ')
Joe! Sam! Tim! Ann! 
In [40]:
def even(n): #Practice Problem 4.4
    for i in range(2, abs(n)+1):
        if i%2==0 or i%3==0:
            print(i, end=', ')
even(23)
2, 3, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 
In [41]:
weekday = 'Wednesday'
month = 'March'
day = 10
year = 2010
hour = 11
minute = 45
second = 33
print('{0}:{1}:{2}'.format(hour, minute, second))
11:45:33
In [42]:
first = 'John'
last = 'Doe'
street = 'Main Street'
number = 123
city = 'AnyCity'
state = 'AS'
zipcode = '09876'
print('{0} {1} \n{2} {3} \n{4}, {5} {6}'.format(first, last, number, street, city, state, zipcode))
John Doe 
123 Main Street 
AnyCity, AS 09876
In [57]:
for i in range(1, 13):
    print('{:5} {:5} {:5} {:5}'.format(i, i**2, i**3, 2**i))
    1     1     1     2
    2     4     8     4
    3     9    27     8
    4    16    64    16
    5    25   125    32
    6    36   216    64
    7    49   343   128
    8    64   512   256
    9    81   729   512
   10   100  1000  1024
   11   121  1331  2048
   12   144  1728  4096
In [58]:
first = 'Bill'
last = 'Gates'
'{:10}{:10}'.format(first, last)
Out[58]:
'Bill      Gates     '
In [59]:
'{0:3}, {1:5}'.format(12, 354)
Out[59]:
' 12,   354'
In [61]:
'{:8.4}'.format(1000/3)
Out[61]:
'   333.3'
In [63]:
n = 10
print('{:b}'.format(n))
print('{:c}'.format(n))
print('{:d}'.format(n))
print('{:x}'.format(n))
1010


10
a
In [64]:
'{:6.2f}'.format(5/3)
Out[64]:
'  1.67'
In [65]:
'{:e}'.format(5/3)
Out[65]:
'1.666667e+00'
In [66]:
def growthrates(n):
    'print values of below 3 functions for i = 1, ..., n'
    print(' i   i**2   i**3   2**i')
    formatStr = '{0:2d} {1:6d} {2:6d} {3:6d}'
    for i in range(2, n+1):
        print(formatStr.format(i, i**2, i**3, 2**i))
growthrates(15)
 i   i**2   i**3   2**i
 2      4      8      4
 3      9     27      8
 4     16     64     16
 5     25    125     32
 6     36    216     64
 7     49    343    128
 8     64    512    256
 9     81    729    512
10    100   1000   1024
11    121   1331   2048
12    144   1728   4096
13    169   2197   8192
14    196   2744  16384
15    225   3375  32768
In [82]:
def roster(lst):
    print('Last     First      Class     Average Grade')
    for student in lst:
        print('{:10}{:10}{:10}{:8.2f}'.format(student[0], student[1], student[2], student[3]))
roster(students)
Last     First      Class     Average Grade
DeMoines  Jim       Sophomore     3.45
Pierre    Sophie    Sophomore     4.00
Columbus  Maria     Senior        2.50
Phoenix   River     Junior        2.45
Olympis   Edgar     Junior        3.99
In [83]:
import time
time.time()
Out[83]:
1575567240.20629
In [84]:
time.gmtime(0)
Out[84]:
time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)
In [85]:
time.localtime()
Out[85]:
time.struct_time(tm_year=2019, tm_mon=12, tm_mday=5, tm_hour=22, tm_min=34, tm_sec=47, tm_wday=3, tm_yday=339, tm_isdst=0)
In [94]:
print(time.strftime('%A %b/%d/%y %I:%M %p')) #Practice Problem 4.7 
print(time.strftime('%Z'))
Thursday Dec/05/19 10:39 PM
Pakistan Standard Time
In [95]:
from time import strftime #Practice Problem 4.7
strftime('%A, %B %d %Y')
Out[95]:
'Thursday, December 05 2019'
In [99]:
strftime('%I:%M %p %Z on %m/%d/%Y')
Out[99]:
'10:47 PM Pakistan Standard Time on 12/05/2019'
In [98]:
strftime('I will meet you on %a %B %d at %I:%M %p')
Out[98]:
'I will meet you on Thu December 05 at 10:45 PM'
4.3 Files

In [103]:
infile = open('example.txt', 'r')
print(infile.read(1))
print(infile.read(5))
print(infile.readline())
print(infile.read())
infile.close()
T
he 3 
lines in this file end with the new line character.

There is a blank line above this line.
In [104]:
def numChars(filename):
    'returns the number of characters in file filename'
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    return len(content)
print(numChars('example.txt'))
96
In [107]:
def stringCount(filename, string): #Practice Problem 4.8
    'returns the number of occurence of the string in file filename'
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    return content.count(string)
print(stringCount('example.txt', 'line'))
4
In [120]:
def words(filename): #Practice Problem 4.9
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    table = str.maketrans('!,.:;?', 6*' ')
    content = content.translate(table)
    content = content.lower()
    return content.split()
print(words('example.txt'))
['the', '3', 'lines', 'in', 'this', 'file', 'end', 'with', 'the', 'new', 'line', 'character', 'there', 'is', 'a', 'blank', 'line', 'above', 'this', 'line']
In [123]:
def numLine(filename):
    infile = open(filename, 'r')
    lineList = infile.readlines()
    infile.close()
    print(lineList)
    print(len(lineList))
    
numLine('example.txt')
['The 3 lines in this file end with the new line character.\n', 'There is a blank line above this line.']
2
In [132]:
def myGrep(filename, target): #Practice Problem 4.10
    infile = open(filename, 'r')
    lines = infile.readlines()
    infile.close()
    for i in lines:
        if i.find(target)!=-1:
            print(i)
            
myGrep('example.txt', 'new')
The 3 lines in this file end with the new line character.

4.4 Errors and Exceptions

In [2]:
s = 'abcdefghijklmopqrstuvwxyz' #Practice problem 4.12
print(s[1:4])
print(s[:3])
print(s[3:-2])
print(s[-4:-1])
print(s[-4:])
bcd
abc
defghijklmopqrstuvwx
wxy
wxyz
In [7]:
s = 'abcdefghijklmnopqrstuvwxyz' #Practice problem 4.13
print(s[1:3])
print(s[:14])
print(s[14:])
print(s[1:-1])
bc
abcdefghijklmn
opqrstuvwxyz
bcdefghijklmnopqrstuvwxy
In [11]:
log = '128.0.0.1 - - [12/Feb/2011:10:31:08 -0600] "GET /docs/test.txt HTTP/1.0"'
address = log[:log.index(' ')]
date = log[log.index('[')+1:log.index(']')]
print(log, address, date, sep='\n') #4.14
128.0.0.1 - - [12/Feb/2011:10:31:08 -0600] "GET /docs/test.txt HTTP/1.0"
128.0.0.1
12/Feb/2011:10:31:08 -0600
In [14]:
s = '10 20 30 40 50 60' #4.15
print(s.split())
['10', '20', '30', '40', '50', '60']
In [15]:
s = '10,20,30,40,50,60'
print(s.split(','))
['10', '20', '30', '40', '50', '60']
In [16]:
s = '10&20&30&40&50&60'
print(s.split('&'))
['10', '20', '30', '40', '50', '60']
In [19]:
s = '10 - 20 - 30 - 40 - 50 - 60'
print(s.split(' - '))
['10', '20', '30', '40', '50', '60']
In [28]:
lst = [] #4.16
first = (str(input('Enter first word: '))).lower()
lst.append(first)
second = (str(input('Enter second word: '))).lower()
lst.append(second)
third = (str(input('Enter third word: '))).lower()
lst.append(third)
lst2 = lst.copy()
lst.sort()
if lst==lst2:
    print('True')
Enter first word: bass
Enter second word: salmonm
Enter third word: whitefish
True
In [29]:
message = 'The secret of this message is that it is secret' #4.17
length = len(message)
count = message.count('secret')
copy = message.replace('secret', 'xxxxxx')
print(message, length, count, copy, sep='\n')
The secret of this message is that it is secret
47
2
The xxxxxx of this message is that it is xxxxxx
In [37]:
s = '''It was the best of times, it was the worst of times; it 
was the age of wisdom, it was the age of foolishness; it was the
epoch of belief, it was the epoch of incredulity; it was ...'''
table = str.maketrans('.,;\n', 4*' ')
newS = s.translate(table)
newS = newS.strip()
newS = newS.lower()
print('Number of occurence of string \'it was\': ', newS.count('it was'))
newS = newS.replace('was', 'is')
listS = newS.split() #4.18
Number of occurence of string 'it was':  7
In [40]:
first = 'Marlena' #4.19
last = 'Sigel'
middle = 'Mae'
print('{}, {} {}'.format(last, first, middle))
print('{}, {} {}.'.format(last, first, middle[0]))
print('{} {}. {}'.format(first, middle[0], last))
print('{0}. {0}. {1}'.format(middle[0], last))
print('{}, {}.'.format(last, middle[0]))
Sigel, Marlena Mae
Sigel, Marlena M.
Marlena M. Sigel
M. M. Sigel
Sigel, M.
In [42]:
sender = str(input('Enter your email: ')) #4.20
recipient = str(input('Enter recipient\'s email: '))
subject = str(input('Enter subject: '))
sender, recipient = sender.strip(), recipient.strip()
subject = subject.title()
print('From: {} \nTo: {} \nSubject: {}'.format(sender, recipient, subject))
Enter your email: ibtesamhussain321@gmail.com
Enter recipient's email: mhussain@students.uit.edu
Enter subject: Hey, Sup?
From: ibtesamhussain321@gmail.com 
To: mhussain@students.uit.edu 
Subject: Hey, Sup?
In [44]:
def month(num): #4.22
    months= {'1':'Jan',
             '2':'Feb', 
             '3':'Mar',
             '4':'Apr',
             '5':'May',
             '6':'Jun',
             '7':'Jul',
             '8':'Aug',
             '9':'Sep',
             '10':'Oct',
             '11':'Nov',
             '12':'Dec'}
    print(months[str(num)])
    
month(1)
month(11)
Jan
Nov
In [47]:
def average(string):
    words = string.split()
    lengthWords = [len(word) for word in words]
    return sum(lengthWords)/len(lengthWords)

sentence = str(input('Enter a sentence: '))
average(sentence)
Enter a sentence: Hello this is abeer from home
Out[47]:
4.0
In [52]:
def cheer(string): #4.24
    if string[-1]!='!':
        string+='!'
    print('How do you spell winner?')
    print('I know, I know!')
    for char in string:
        print(char.upper(), end=" ")
    print("")
    print('And that\'s how you spell winner!')
    print('Go '+string.title())
cheer('abeer')
How do you spell winner?
I know, I know!
A B E E R ! 
And that's how you spell winner!
Go IBTESAM!
In [58]:
def vowelCount(string): #4.25
    string = string.lower()
    vowels = {'a':0,
             'e':0,
             'i':0,
             'o':0,
             'u':0,}
    for char in string:
        if char in 'aeiou':
            vowels[char] = string.count(char)
    print('a, e, i, o, and u apper, respectively, {}, {}, {}, {}, {} times'.format(vowels['a'], vowels['e'], vowels['i'], vowels['o'], vowels['u'],))
vowelCount('IBTESAM HUSSAIN')
a, e, i, o, and u apper, respectively, ........ times
In [62]:
def crypto(filename): #4.26 
    infile = open(filename, 'r')
    content = infile.readlines()
    infile.close()
    content = ''.join(content)
    crypto = content.replace('secret', 'xxxxxx')
    print(crypto)
crypto('crypto.txt')
I will tell you my xxxxxx. But first, I have to explain
why it is a xxxxxx.
And that is all I will tell you about my xxxxxx.
In [63]:
def fcopy(file1, file2): #4.27
    infile1 = open(file1, 'r')
    infile2 = open(file2, 'w')
    content = infile1.read()
    infile1.close()
    infile2.write(content)
    infile2.close()
fcopy('example.txt', 'output.txt')
In [65]:
open('output.txt', 'r').read()
Out[65]:
'The 3 lines in this file end with the new line character.\n\nThere is a blank line above this line.'
In [66]:
def links(filename): #4.28
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    print(content.count('</a>'))
links('links.html')
3
In [73]:
def stats(filename):  #4.29
    file = open(filename, 'r')
    raw = file.readlines()
    file.close()
    lines = len(raw)
    content = []
    for i in raw:
        if '\n' in i:
            content.append(i[0:-2])
        else:
            content.append(i)
    rem_list = ''.join(content)
    print('Line Count: {}'.format(lines))
    print('Word Count: {}'.format(len(rem_list.split())))
    print('Character Count: {}'.format(len(rem_list)))

stats('example.txt')
Line Count: 3
Word Count: 19
Character Count: 94
In [77]:
def distribution(filename): #4.30
    infile = open(filename, 'r')
    content = infile.read()
    infile.close()
    grades = content.split()
    gradeScan = {}
    for grade in grades:
        if grade not in gradeScan:
            gradeScan[grade] = grades.count(grade)
    for key, value in gradeScan.items():
        print('{} Students got {}'.format(value, key))
distribution('grades.txt')
5 Students got A+
3 Students got A-
4 Students got A
2 Students got B+
2 Students got B
1 Students got B-
6 Students got C+
4 Students got C
1 Students got C-
2 Students got D
In [78]:
def duplicate(filename): #4.31
    infile = open(filename, 'r')
    raw = infile.read()
    infile.close()
    data = raw.split()
    result = []
    for i in data:
        if data.count(i)>1:
            result.append(True)
        else:
            result.append(False)
    if True in result:
        print('True')
    else:
        print('False')
duplicate('duplicate.txt')
duplicate('noDuplicate.txt')
True
False
In [97]:
def censor(filename): #4.32
    infile = open(filename, 'r')
    outfile = open('abc.txt', 'w')
    lines = infile.readlines()
    infile.close()
    content = "".join(lines)
    content = content.split()
    for word in content:
        if len(word)==4:
            content[content.index(word)] = 'xxxx'
    content = " ".join(content)
    outfile.write(content)
    outfile.close()
censor('example.txt')
In [98]:
open('abc.txt', 'r').read()
Out[98]:
'The 3 lines in xxxx xxxx end xxxx the new xxxx character. There is a blank xxxx above xxxx line.'
In [ ]:
